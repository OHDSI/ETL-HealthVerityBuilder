/*ALL VISITS*/
/*********************************************************************************************/

IF OBJECT_ID('@result_claim_lines', 'U') IS NOT NULL DROP TABLE @result_claim_lines
CREATE TABLE @result_claim_lines WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH(HVID)) AS

SELECT MC.CLAIM_ID+cast(MC.RECORD_ID as varchar(32))+DATA_FEED AS STEM_ID,
	MC.CLAIM_ID,
  HVID,
	DATE_SERVICE AS VISIT_START_DATE,
	CASE
		WHEN DATE_SERVICE_END IS NULL THEN DATE_SERVICE
		ELSE DATE_SERVICE_END
	END AS VISIT_END_DATE,
	CLAIM_TYPE,
	REVENUE_CODE,
	PROCEDURE_CODE,
	PLACE_OF_SERVICE_STD_ID,
	PROV_RENDERING_NPI,

	/*~~~ONCE WE DECIDE ON VISIT LOGIC (OLD/NEW) REMOVE ONE NOT USING AND CASCADE THROUGH CODE AND UPDATE DOCUMENT~~~*/
	CASE
		WHEN PLACE_OF_SERVICE_STD_ID IN ('13','31','32','34')
			THEN 'LTC'
		WHEN PLACE_OF_SERVICE_STD_ID IN ('21')
			OR (REVENUE_CODE >= '0100' AND REVENUE_CODE <= '0219') /* Room and Board Charges */
			OR (REVENUE_CODE >= '0720' AND REVENUE_CODE <= '0729') /* Labor Room and Delivery */
			OR (REVENUE_CODE >= '0800' AND REVENUE_CODE <= '0809') /* Inpatient Renal Dialysis */
			THEN 'IP'
		ELSE (
			CASE
				WHEN PLACE_OF_SERVICE_STD_ID IN ('23')
					OR (REVENUE_CODE >= '0450' AND REVENUE_CODE <= '0459')
					OR REVENUE_CODE ='0981'
					OR PROCEDURE_CODE IN ('99281','99282','99283','99284','99285')
					THEN 'ER'
				ELSE 'OP'
			END
		)
	END AS CLAIM_TYPE_NEW,

	CASE
		WHEN (REVENUE_CODE >= '0100' AND REVENUE_CODE <= '0219') /* Room and Board Charges */
			OR (REVENUE_CODE >= '0720' AND REVENUE_CODE <= '0729') /* Labor Room and Delivery */
			OR (REVENUE_CODE >= '0800' AND REVENUE_CODE <= '0809') /* Inpatient Renal Dialysis */
		THEN (
			CASE
				WHEN PLACE_OF_SERVICE_STD_ID IN ('13','31','32','34')
					THEN 'LTC'
				ELSE 'IP'
			END
		)
	ELSE (
		CASE WHEN PLACE_OF_SERVICE_STD_ID IN ('23')
			OR (REVENUE_CODE >= '0450' AND REVENUE_CODE <= '0459')
			OR REVENUE_CODE ='0981'
			OR PROCEDURE_CODE IN ('99281','99282','99283','99284','99285')
			THEN 'ER'
		ELSE 'OP' END
	)
	END AS CLAIM_TYPE_OLD
FROM @source_schema.MEDICAL_CLAIMS MC
WHERE SUBSTRING(HVID,1,@n_substring) = '@HVID_CHUNK'

/*Step 3.2 - Do initial collapsing by claim type and date*/
/*******************************************************/
/*Step 3.2.1 collapse IP claim lines with <=1 day between them into one visit*/

IF OBJECT_ID('tempdb..#IP_VISITS', 'U') IS NOT NULL DROP TABLE #IP_VISITS
CREATE TABLE #IP_VISITS WITH (LOCATION = USER_DB, DISTRIBUTION = HASH(HVID)) AS

WITH CTE_END_DATES AS (
	SELECT HVID, CLAIM_TYPE_NEW, DATEADD(DAY,-1,EVENT_DATE) AS END_DATE
	FROM (
		SELECT HVID, CLAIM_TYPE_NEW, EVENT_DATE, EVENT_TYPE,
			MAX(START_ORDINAL) OVER (PARTITION BY HVID, CLAIM_TYPE_NEW ORDER BY EVENT_DATE, EVENT_TYPE ROWS UNBOUNDED PRECEDING) AS START_ORDINAL,
			ROW_NUMBER() OVER (PARTITION BY HVID, CLAIM_TYPE_NEW ORDER BY EVENT_DATE, EVENT_TYPE) AS OVERALL_ORD
		FROM (
			SELECT HVID, CLAIM_TYPE_NEW, VISIT_START_DATE AS EVENT_DATE, -1 AS EVENT_TYPE, ROW_NUMBER () OVER (PARTITION BY HVID, CLAIM_TYPE_NEW ORDER BY VISIT_START_DATE, VISIT_END_DATE, PROV_RENDERING_NPI) AS START_ORDINAL
			FROM @result_claim_lines
			WHERE CLAIM_TYPE_NEW = 'IP'
			UNION ALL
			SELECT HVID, CLAIM_TYPE_NEW, DATEADD(DAY,1,VISIT_END_DATE), 1 AS EVENT_TYPE, NULL
			FROM @result_claim_lines
			WHERE CLAIM_TYPE_NEW = 'IP'
		) RAWDATA
	) E
	WHERE (2 * E.START_ORDINAL - E.OVERALL_ORD = 0)
),
CTE_VISIT_ENDS AS (
	SELECT V.HVID,
		V.CLAIM_TYPE_NEW,
		V.VISIT_START_DATE,
		MIN(E.END_DATE) AS VISIT_END_DATE
	FROM @result_claim_lines V
		JOIN CTE_END_DATES E
			ON V.HVID = E.HVID
			AND V.CLAIM_TYPE_NEW = E.CLAIM_TYPE_NEW
			AND E.END_DATE >= V.VISIT_START_DATE
	GROUP BY V.HVID,V.CLAIM_TYPE_NEW,V.VISIT_START_DATE
)
SELECT T2.HVID,
	T2.CLAIM_TYPE_NEW,
	T2.VISIT_START_DATE,
	T2.VISIT_END_DATE,
	T3.PROV_RENDERING_NPI
FROM (
	SELECT HVID,
		CLAIM_TYPE_NEW,
		MIN(VISIT_START_DATE) AS VISIT_START_DATE,
		VISIT_END_DATE,
		COUNT(*) AS CLAIM_LINE_COUNT
	FROM CTE_VISIT_ENDS
	GROUP BY HVID, CLAIM_TYPE_NEW, VISIT_END_DATE
) T2
	LEFT JOIN (
		SELECT HVID,
			CLAIM_TYPE_NEW,
			VISIT_START_DATE,
			PROV_RENDERING_NPI,
			ROW_NUMBER () OVER (PARTITION BY HVID, CLAIM_TYPE_NEW, VISIT_START_DATE ORDER BY PROV_RENDERING_NPI) AS RN
		FROM @result_claim_lines
		WHERE CLAIM_TYPE_NEW = 'IP'
		AND PROV_RENDERING_NPI IS NOT NULL
	) T3
		ON T2.HVID = T3.HVID
		AND T2.VISIT_START_DATE = T3.VISIT_START_DATE
		AND T3.RN = 1

/*Step 3.2.2 collapse LTC claim lines with <=32 days between them into one visit*/

IF OBJECT_ID('tempdb..#LTC_VISITS', 'U') IS NOT NULL DROP TABLE #LTC_VISITS
CREATE TABLE #LTC_VISITS WITH (LOCATION = USER_DB, DISTRIBUTION = HASH(HVID)) AS

WITH CTE_END_DATES AS (
	SELECT HVID, CLAIM_TYPE_NEW, DATEADD(DAY,-32,EVENT_DATE) AS END_DATE
	FROM (
		SELECT HVID, CLAIM_TYPE_NEW, EVENT_DATE, EVENT_TYPE,
			MAX(START_ORDINAL) OVER (PARTITION BY HVID, CLAIM_TYPE_NEW ORDER BY EVENT_DATE, EVENT_TYPE ROWS UNBOUNDED PRECEDING) AS START_ORDINAL,
			ROW_NUMBER() OVER (PARTITION BY HVID, CLAIM_TYPE_NEW ORDER BY EVENT_DATE, EVENT_TYPE) AS OVERALL_ORD
		FROM (
			SELECT HVID, CLAIM_TYPE_NEW, VISIT_START_DATE AS EVENT_DATE, -1 AS EVENT_TYPE, ROW_NUMBER () OVER (PARTITION BY HVID, CLAIM_TYPE_NEW ORDER BY VISIT_START_DATE, VISIT_END_DATE, PROV_RENDERING_NPI) AS START_ORDINAL
			FROM @result_claim_lines
			WHERE CLAIM_TYPE_NEW = 'LTC'
			UNION ALL
			SELECT HVID, CLAIM_TYPE_NEW, DATEADD(DAY,32,VISIT_END_DATE), 1 AS EVENT_TYPE, NULL
			FROM @result_claim_lines
			WHERE CLAIM_TYPE_NEW = 'LTC'
		) RAWDATA
	) E
	WHERE (2 * E.START_ORDINAL - E.OVERALL_ORD = 0)
),
CTE_VISIT_ENDS AS (
	SELECT V.HVID,
		V.CLAIM_TYPE_NEW,
		V.VISIT_START_DATE,
		MIN(E.END_DATE) AS VISIT_END_DATE
	FROM @result_claim_lines V
	JOIN CTE_END_DATES E
		ON V.HVID = E.HVID
		AND V.CLAIM_TYPE_NEW = E.CLAIM_TYPE_NEW
		AND E.END_DATE >= V.VISIT_START_DATE
	GROUP BY V.HVID,
			V.CLAIM_TYPE_NEW,
			V.VISIT_START_DATE
)
SELECT T2.HVID,
	T2.CLAIM_TYPE_NEW,
	T2.VISIT_START_DATE,
	T2.VISIT_END_DATE,
	T3.PROV_RENDERING_NPI
FROM (
	SELECT HVID,
		CLAIM_TYPE_NEW,
		MIN(VISIT_START_DATE) AS VISIT_START_DATE,
		VISIT_END_DATE,
		COUNT(*) AS CLAIM_LINE_COUNT
	FROM CTE_VISIT_ENDS
	GROUP BY HVID, CLAIM_TYPE_NEW, VISIT_END_DATE
) T2
	LEFT JOIN (
		SELECT HVID,
			CLAIM_TYPE_NEW,
			VISIT_START_DATE,
			PROV_RENDERING_NPI,
			ROW_NUMBER () OVER (PARTITION BY HVID, CLAIM_TYPE_NEW, VISIT_START_DATE ORDER BY PROV_RENDERING_NPI) AS RN
		FROM @result_claim_lines
		WHERE CLAIM_TYPE_NEW = 'LTC' AND PROV_RENDERING_NPI IS NOT NULL
	) T3
	ON T2.HVID = T3.HVID
	AND T2.VISIT_START_DATE = T3.VISIT_START_DATE
	AND T3.RN = 1

/*Step 3.2.3 collapse ER claim lines with no days between them into one visit*/

IF OBJECT_ID('tempdb..#ER_VISITS', 'U') IS NOT NULL DROP TABLE #ER_VISITS
CREATE TABLE #ER_VISITS WITH (LOCATION = USER_DB, DISTRIBUTION = HASH(HVID)) AS

SELECT T2.HVID,
	T2.CLAIM_TYPE_NEW,
	T2.VISIT_START_DATE,
	T2.VISIT_END_DATE,
	T3.PROV_RENDERING_NPI
FROM (
	SELECT HVID,
		CLAIM_TYPE_NEW,
		VISIT_START_DATE,
		MAX(VISIT_END_DATE) AS VISIT_END_DATE
	FROM (
		SELECT CL1.HVID,
			CL1.CLAIM_TYPE_NEW,
			CL1.VISIT_START_DATE,
			CL2.VISIT_END_DATE
		FROM @result_claim_lines CL1
		JOIN @result_claim_lines CL2
			ON CL1.HVID = CL2.HVID
			AND CL1.VISIT_START_DATE = CL2.VISIT_START_DATE
			AND CL1.CLAIM_TYPE_NEW = CL2.CLAIM_TYPE_NEW
		WHERE CL1.CLAIM_TYPE_NEW = 'ER'
	) T1
	GROUP BY HVID, CLAIM_TYPE_NEW, VISIT_START_DATE
) T2
	LEFT JOIN (
		SELECT HVID,
			CLAIM_TYPE_NEW,
			VISIT_START_DATE,
			PROV_RENDERING_NPI,
			ROW_NUMBER () OVER (PARTITION BY HVID, CLAIM_TYPE_NEW, VISIT_START_DATE ORDER BY PROV_RENDERING_NPI) AS RN
		FROM @result_claim_lines
		WHERE CLAIM_TYPE_NEW = 'ER' AND PROV_RENDERING_NPI IS NOT NULL
	) T3
		ON T2.HVID = T3.HVID
		AND T2.VISIT_START_DATE = T3.VISIT_START_DATE
		AND T3.RN = 1

/*Step 3.2.4 collapse OP claim lines with no days between them and the same provider into one visit*/

IF OBJECT_ID('tempdb..#OP_VISITS', 'U') IS NOT NULL DROP TABLE #OP_VISITS
CREATE TABLE #OP_VISITS WITH (LOCATION = USER_DB, DISTRIBUTION = HASH(HVID)) AS

WITH CTE_VISITS_DISTINCT AS (
	SELECT DISTINCT HVID,
					CLAIM_TYPE_NEW,
					VISIT_START_DATE,
					VISIT_END_DATE,
					PROV_RENDERING_NPI
	FROM @result_claim_lines
	WHERE CLAIM_TYPE_NEW = 'OP'
),

CTE_VISITS_WITH_PROV AS (
	SELECT CL1.HVID,
			CL1.CLAIM_TYPE_NEW,
			CL1.VISIT_START_DATE,
			CL2.VISIT_END_DATE,
			CL1.PROV_RENDERING_NPI,
			1 AS PROV
	FROM CTE_VISITS_DISTINCT CL1
	JOIN CTE_VISITS_DISTINCT CL2
		ON CL1.HVID = CL2.HVID
		AND CL1.VISIT_START_DATE = CL2.VISIT_START_DATE
		AND CL1.PROV_RENDERING_NPI = CL2.PROV_RENDERING_NPI
	WHERE CL1.PROV_RENDERING_NPI IS NOT NULL
),

CTE_VISITS_NO_PROV AS (
	SELECT DISTINCT N.HVID, N.CLAIM_TYPE_NEW, N.VISIT_START_DATE, N.VISIT_END_DATE, N.PROV_RENDERING_NPI
	FROM (
		SELECT CL1.HVID,
			CL1.CLAIM_TYPE_NEW,
			CL1.VISIT_START_DATE,
			CL2.VISIT_END_DATE,
			CL1.PROV_RENDERING_NPI
		FROM CTE_VISITS_DISTINCT CL1
		JOIN CTE_VISITS_DISTINCT CL2
			ON CL1.HVID = CL2.HVID
			AND CL1.VISIT_START_DATE = CL2.VISIT_START_DATE
		WHERE CL1.PROV_RENDERING_NPI IS NULL
	) N
		LEFT JOIN CTE_VISITS_WITH_PROV W
			ON N.HVID = W.HVID
			AND N.VISIT_START_DATE = W.VISIT_START_DATE
			AND N.VISIT_END_DATE = W.VISIT_END_DATE
	WHERE PROV IS NULL
)

SELECT HVID,
		CLAIM_TYPE_NEW,
		VISIT_START_DATE,
		MAX(VISIT_END_DATE) AS VISIT_END_DATE,
		PROV_RENDERING_NPI
FROM (
	SELECT HVID, CLAIM_TYPE_NEW, VISIT_START_DATE, VISIT_END_DATE, PROV_RENDERING_NPI
	FROM CTE_VISITS_WITH_PROV
	UNION ALL
	SELECT *
	FROM CTE_VISITS_NO_PROV
) T1
GROUP BY HVID, CLAIM_TYPE_NEW, VISIT_START_DATE, PROV_RENDERING_NPI

/*Step 3.3 - Union all visits together to assign VISIT_OCCURRENCE_ID*/
/******************************************************************/
IF OBJECT_ID('tempdb..@result_temp_all_visits', 'U') IS NOT NULL DROP TABLE @result_temp_all_visits
CREATE TABLE @result_temp_all_visits WITH (LOCATION = USER_DB, DISTRIBUTION = HASH(HVID)) AS
  SELECT *
  FROM
  (
  	SELECT * FROM #IP_VISITS
  	UNION ALL
  	SELECT * FROM #LTC_VISITS
  	UNION ALL
  	SELECT * FROM #ER_VISITS
  	UNION ALL
  	SELECT * FROM #OP_VISITS
  ) T1
